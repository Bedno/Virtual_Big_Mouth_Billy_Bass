<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<meta name='keywords' content='Virtual Big Mouth Billy Bass'>
<meta name="description" content="Virtual Big Mouth Billy Bass">
<link rel='shortcut icon' href='https://bedno.com/g/vbmbb/vbmbb-icon.ico'>
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta property="og:title" content="VirtualBillyBass.com" />
<meta property="og:description" content="Virtual Billy Bass : Text-to-speech talking animated character." />
<meta property="og:image" content="https://bedno.com/g/vbmbb/virtualbillybass-620x325b.jpg" />
<meta property="og:type" content="website" />
<meta property="og:url" content="http://VirtualBillyBass.com" />
<meta property="og:site_name" content="VirtualBillyBass.com" />
<head>
<title>Virtual Big Mouthed Billy Bass</title>
</head>
<script>

// Basic web-based text-to-speech talking animated character.  http://VirtualBillyBass.com
// More info at https://github.com/bedno/Virtual_Big_Mouth_Billy_Bass

// Speech globals.
var SpeechTxt = "";  var TailNextIdx = 0;
var TimerMouth = null;  var TimerTail = null;  var SeqMouth = 0;  var SeqTail = 0;
var SpeechVoices = null;  var SpeechHandle = null;

// Weather globals.
var WeatherForecastHandle = null;
var WeatherCurrentSpoken = "";
var WeatherForecastSpoken = "";
var WeatherTimer = 0;
var WeatherForecastURL = 'http://bedno.com/bike/d/w/wz-chicago-more.json';  // Cached from http://api.wunderground.com/api/<api_key>/forecast/pws/q/pws:KILCHICA173.json
var WeatherCurrentURL = 'http://bedno.com/bike/d/w/wz-chicago-now.json';  // Cached from http://api.wunderground.com/api/<api_key>/conditions/pws/q/pws:KILCHICA173.json

// Global utilities.

// Speech functions.
function UnqSec () {
  var Udt=new Date();
  return('?'+Udt.getYear().toString()+''+Udt.getMonth().toString()+''+Udt.getDate().toString()+''+Udt.getHours().toString()+''+Udt.getMinutes().toString()+''+Udt.getSeconds().toString()+'');
}

function UpdMouth() {
  if (SeqMouth == 2) {
    SeqMouth = 1;
    if (TimerMouth) { clearTimeout(TimerMouth); }
    TimerMouth = setTimeout('UpdMouth()',250);
  } else {
    SeqMouth = 0;
    MouthChar = '-';
  }
  document.getElementById('ImgMouth').src = "https://bedno.com/g/vbmbb/mouth-"+SeqMouth.toString()+".png";
}
function ActMouth() {
  SeqMouth = 2;
  document.getElementById('ImgMouth').src = "https://bedno.com/g/vbmbb/mouth-"+SeqMouth.toString()+".png";
  if (TimerMouth) { clearTimeout(TimerMouth); }
  TimerMouth = setTimeout('UpdMouth()',250);
}
function UpdTail() {
  SeqTail = 0;
  document.getElementById('ImgTail').src = "https://bedno.com/g/vbmbb/tail-"+SeqTail.toString()+".png";
}
function ActTail() {
  SeqTail = 1;
  document.getElementById('ImgTail').src = "https://bedno.com/g/vbmbb/tail-"+SeqTail.toString()+".png";
  if (TimerTail) { clearTimeout(TimerTail); }
  TimerTail = setTimeout('UpdTail()',400);
}
function SpeechLog(SLin) {
  if (location.href.toLowerCase().indexOf('dev')>-1) {
    document.getElementById('SpeechConsole').innerHTML = SLin+document.getElementById('SpeechConsole').innerHTML;
  }
}
function SpeechDone(SpeechEvent) {
  SpeechLog('Finished in '+(Math.round((SpeechEvent.elapsedTime/100))/10).toString()+" seconds.\n");
}
function SpeechWord(SpeechEvent) {
  ActMouth();
  if (SpeechEvent.charIndex>TailNextIdx) { ActTail(); TailNextIdx += 12+Math.floor(Math.random()*18); }
  SpeechLog(SpeechEvent.name+':'+SpeechEvent.charIndex+"\n");
}
function SpeechDo () {
  TailNextIdx = SpeechTxt.length/2;  if (TailNextIdx>22) { TailNextIdx = 12+Math.floor(Math.random()*18); }
  if ('speechSynthesis' in window) {  // If browser is speech capable
    window.speechSynthesis.cancel();  // Cancel any existing speaking
    SpeechHandle.text = SpeechTxt;
    // Connect the completion callback.
    SpeechHandle.onend = SpeechDone;
    // Connect the word boundary callback.
    SpeechHandle.onboundary = SpeechWord;
    // Speak the passed phrase.
    window.speechSynthesis.speak(SpeechHandle);
  } else {
    SpeechLog("This device does not support text to speech.\n");
  }
}

function SpeechSetup () {
  if ('speechSynthesis' in window) {  // If browser is speech capable
    SpeechVoices = window.speechSynthesis.getVoices();
    SpeechHandle = new SpeechSynthesisUtterance();  // Initialize a speech handle
    SpeechHandle.voice = SpeechVoices[10];  // Select voice and other settings.
    SpeechHandle.voiceURI = 'native';
    SpeechHandle.volume = 1.0; // 0 to 1
    SpeechHandle.rate = 1.0; // 0.1 to 10
    SpeechHandle.pitch = 1.0; // 0 to 2
    SpeechHandle.lang = 'en-US';
  } else {
    document.getElementById('NoSpeech').innerHTML = "<br><br><font color='red' size=3>SORRY, this browser can't speak.</font><br><br>";
  }
}

// Return a completely ready to speak time/weather message.
function SpokenForecast () {
  var SFstr = "";
  if ('speechSynthesis' in window) {
    var SpkDT=new Date();
    var SpkHr = 0;  var SpkAP = "AM";
    SpkHr = SpkDT.getHours();
    if (SpkHr>12) { SpkHr = SpkHr-12; SpkAP = "PM"; }
    if (SpkHr==12) { SpkAP = "PM"; }
    if (SpkHr==0) SpkHr = 12;
    var SpkMn = "";
    if (SpkDT.getMinutes()>0) {
      SpkMn = SpkDT.getMinutes().toString();
      if (SpkMn.length<2) SpkMn = " O "+SpkMn;
    }
    if (WeatherCurrentSpoken.length>4) {
      if (WeatherForecastSpoken.length>4) {
        SFstr = "In Chicago at "+SpkHr.toString()+" "+SpkMn+SpkAP+" its "+WeatherCurrentSpoken.toUpperCase()+" "+WeatherForecastSpoken.replace(/^[^\s]+\ /,'FORECASTING ');
      } else {
        SFstr = "In Chicago at "+SpkHr.toString()+" "+SpkMn+SpkAP+" its "+WeatherCurrentSpoken.toUpperCase();
      }
    } else {
      if (WeatherForecastSpoken.length>4) {
        SFstr = WeatherForecastSpoken.replace(/^[^\s]+\ /,'Forecasting ');
      }
    }
  }
  if ( (WeatherCurrentSpoken.length<5) && (WeatherForecastSpoken.length<5) ) { SFstr = "Sorry, I couldn't fetch the weather report."; }
  SpeechLog('Ready to speak: "'+SFstr+'"'+"<br>\n");
  return(SFstr);
}

// Speech button handlers.
function SpeakWeather () {
  SpeechTxt = SpokenForecast();
  SpeechDo();
}

function SpeakFortune () {
  var Fortunes = new Array('It is certain', 'It is decidedly so', 'Without a doubt', 'Yes definitely', 'You may rely on it', 'As I see it, yes', 'Most likely', 'Outlook good', 'Yes', 'Signs point to yes', 'Reply hazy try again', 'Ask again later', 'Better not tell you now', 'Cannot predict now', 'Concentrate and ask again', 'Do not count on it', 'My reply is no', 'My sources say no', 'Outlook not so good', 'Very doubtful');
  var FortuneIdx = Math.floor(Math.random()*Fortunes.length);
  var Preambles = new Array('The universe suggests your answer is', 'The virtual magic eight ball says', 'The digital tea leaves tell me');
  var PreambleIdx = Math.floor(Math.random()*Preambles.length);
  SpeechTxt = Preambles[PreambleIdx]+"...\n\n"+Fortunes[FortuneIdx];
  SpeechDo();
}

function SpeakSong () {
  SpeechTxt = "I wanna know, can you tell me?\n"+"I'd love to stay\n";
  SpeechTxt += "Take me to the river, drop me in the water\n"+"Take me to the river, drop me in the water\n";
  SpeechDo();
}

// WEATHER handling.

// Asynchronous receive and parse of JSON response to weather forecast query (on capable browsers).  Current supports only Wunderground.com format.
function FmtMinus (FMin) {
  return(Math.floor(FMin).toString().replace(/-([0-9]+)/gi,"<span style='font-size:80%; vertical-align:40%;'>-</span>$1"));
}
function SpokenMinus (FMin) {
  return(Math.floor(FMin).toString().replace(/-([0-9]+)/gi,"minus $1"));
}
function WeatherForecastReceive () {
  WeatherForecastSpoken = "";
  if ( (WeatherForecastHandle.readyState==4) && (WeatherForecastHandle.status==200) ) {
    var FWFread = WeatherForecastHandle.responseText;
    try {
      var FWFrec = JSON.parse(FWFread);
      FWFrec['forecast']['simpleforecast']['forecastday'][0]['low']['fahrenheit'] = Math.floor(FWFrec['forecast']['simpleforecast']['forecastday'][0]['low']['fahrenheit']);
      FWFrec['forecast']['simpleforecast']['forecastday'][0]['high']['fahrenheit'] = Math.floor(FWFrec['forecast']['simpleforecast']['forecastday'][0]['high']['fahrenheit']);
      WeatherForecastSpoken = FWFrec['forecast']['simpleforecast']['forecastday'][0]['date']['weekday']+" ";
      WeatherForecastSpoken += FWFrec['forecast']['simpleforecast']['forecastday'][0]['low']['fahrenheit']+" to "+FWFrec['forecast']['simpleforecast']['forecastday'][0]['high']['fahrenheit']+". ";
      WeatherForecastSpoken += FWFrec['forecast']['txt_forecast']['forecastday'][0]['fcttext'];
      WeatherForecastSpoken = WeatherForecastSpoken.toUpperCase();
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/\.[0-9]+/gi,"");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([0-9])s([^A-Z0-9])/gi,"$1's$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([0-9])F/gi,"$1");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])E([^A-Z0-9])/gi,"$1EAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])W([^A-Z0-9])/gi,"$1WEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])N([^A-Z0-9])/gi,"$1NORTH$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])S([^A-Z0-9])/gi,"$1SOUTH$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])NE([^A-Z0-9])/gi,"$1NORTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])SE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])SW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])NW([^A-Z0-9])/gi,"$1NORTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])NNE([^A-Z0-9])/gi,"$1NORTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])ENE([^A-Z0-9])/gi,"$1NORTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])ESE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])SSE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])SSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])WSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])WNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])NNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z0-9\.\-'\,])PRECIP([^A-Z0-9])/gi,"$1PRECIPITATION$2");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/MPH/gi,"");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/WIND/gi,"WEND");
      WeatherForecastSpoken = WeatherForecastSpoken.replace(/([^A-Z])\./gi,"$1; \n");
      SpeechLog('Weather Forecast received: '+WeatherForecastSpoken+"<br>\n");
      if ( (WeatherCurrentSpoken.length>4) && (WeatherForecastSpoken.length>4) ) { SpeakWeather(); }
    } catch (err) { SpeechLog('Weather Forecast received error: '+err+"<br>\n"); }
  }
}

// Request weather forecast on capable browsers.
function WeatherForecastRequest () {
  var WFout = "";
  try {
    WeatherForecastHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherForecastHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherForecastHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherForecastHandle = null;
      }
    }
  }
  if (WeatherForecastHandle) {
    try {
      if (WeatherForecastURL.length>1) {
        WeatherForecastHandle.open('GET', WeatherForecastURL+'?'+UnqSec(), true);
        WeatherForecastHandle.timeout = 20000;
        WeatherForecastHandle.onreadystatechange = WeatherForecastReceive;
        WeatherForecastHandle.send(null);
      }
    } catch (err) { SpeechLog('Weather Forecast request error: '+err+" fetching '"+WeatherForecastURL+"'<br>\n"); }
  }
}

// Asynchronous receive and parse of JSON response to weather current conditions query (on capable browsers).  Current supports only Wunderground.com format.
var WeatherCurrentHandle = false;
function WeatherCurrentReceive () {
  var WeatherCurrentSpokenTmp = "";
  if ( (WeatherCurrentHandle.readyState==4) && (WeatherCurrentHandle.status==200) ) {
    var FWCread = WeatherCurrentHandle.responseText;
    try {
      var FWCrec = JSON.parse(FWCread);
      WeatherCurrentSpokenTmp += SpokenMinus(FWCrec['current_observation']['temp_f'])+", ";
      if (FWCrec['current_observation']['weather'].length>1) {
        WeatherCurrentSpokenTmp += FWCrec['current_observation']['weather']+", "
      }
      FWCrec['current_observation']['wind_mph'] = Math.floor(FWCrec['current_observation']['wind_mph']);
      FWCrec['current_observation']['wind_gust_mph'] = Math.floor(FWCrec['current_observation']['wind_gust_mph']);
      if ( (FWCrec['current_observation']['wind_mph']>2) || (FWCrec['current_observation']['wind_gust_mph']>2) ) {
        WeatherCurrentSpokenTmp += ", WENDS ";
        if (FWCrec['current_observation']['wind_dir'].length<1) {
          WeatherCurrentSpokenTmp += "variable ";
        } else {
          WeatherCurrentSpokenTmp += FWCrec['current_observation']['wind_dir']+" ";
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NorthWest$2");
        }
        if (FWCrec['current_observation']['wind_mph']<=2) {
          WeatherCurrentSpokenTmp += "gusting at "+FWCrec['current_observation']['wind_gust_mph'];
        } else {
          WeatherCurrentSpokenTmp += "at "+FWCrec['current_observation']['wind_mph'];
          if ( (FWCrec['current_observation']['wind_gust_mph']>2) && ((FWCrec['current_observation']['wind_gust_mph']-FWCrec['current_observation']['wind_mph'])>1) ) {
            WeatherCurrentSpokenTmp += " to "+FWCrec['current_observation']['wind_gust_mph'];
          }
        }
      }
      if ( (FWCrec['current_observation']['windchill_f']!="") && (FWCrec['current_observation']['windchill_f']!="NA") && (FWCrec['current_observation']['windchill_f']!="N/A") && (FWCrec['current_observation']['windchill_f']!="null") && (FWCrec['current_observation']['windchill_f']!="undefined") &&
           (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['windchill_f'])>4) ) {
        WeatherCurrentSpokenTmp += ", feels like "+SpokenMinus(FWCrec['current_observation']['windchill_f']);
      } else {
        if ( (FWCrec['current_observation']['heat_index_f']!="") && (FWCrec['current_observation']['heat_index_f']!="NA") && (FWCrec['current_observation']['heat_index_f']!="N/A") && (FWCrec['current_observation']['heat_index_f']!="null") && (FWCrec['current_observation']['heat_index_f']!="undefined") &&
             (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['heat_index_f'])>4) ) {
          WeatherCurrentSpokenTmp += ", feels like "+SpokenMinus(FWCrec['current_observation']['heat_index_f']);
        }
      }
      var FWhum = FWCrec['current_observation']['relative_humidity'].replace('%','');
      if ( (FWhum>1) && (FWhum<120) ) { WeatherCurrentSpokenTmp += ", humidity "+FWhum.toString()+" percent"; }
      WeatherCurrentSpokenTmp += ".";
      WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/\.[0-9]+/g,'');
    } catch (err) { SpeechLog('Weather Current receive error: '+err+"<br>\n"); }
  }
  WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/^[\s]+/gi,"");
  WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/[\s]+$/gi,"");
  if (WeatherCurrentSpokenTmp.length > 4) {
    WeatherCurrentSpoken = WeatherCurrentSpokenTmp;
    SpeechLog('Weather Current received: '+WeatherForecastSpoken+"<br>\n");
    if ( (WeatherCurrentSpoken.length>4) && (WeatherForecastSpoken.length>4) ) { SpeakWeather(); }
  }
}
// Request weather current conditions on capable browsers.
function WeatherCurrentRequest () {
  try {
    WeatherCurrentHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherCurrentHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherCurrentHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherCurrentHandle = false;
      }
    }
  }
  if (WeatherCurrentHandle) {
    try {
      if (WeatherCurrentURL.length>1) {
        WeatherCurrentHandle.open('GET', WeatherCurrentURL+'?'+UnqSec(), true);
        WeatherCurrentHandle.timeout = 20000;
        WeatherCurrentHandle.onreadystatechange = WeatherCurrentReceive;
        WeatherCurrentHandle.send(null);
      }
    } catch (err) { SpeechLog('Weather Current request error: '+err+" fetching '"+WeatherCurrentURL+"'<br>\n"); }
  }
}

function WeatherSync () {
  if (WeatherTimer) { clearTimeout(WeatherTimer); }
  WeatherCurrentRequest();
  WeatherForecastRequest();
  WeatherTimer = setTimeout('WeatherSync()', 10*60*1000);  // Refresh weather again every ten minutes.
}

// MAIN
function DoStartup () {
  WeatherSync();
  SpeechSetup();
}

</script>
<body onLoad="DoStartup();"><font face="Arial" size=2>
<center>
<br><font size=2><a href="http://VirtualBillyBass.com">VirtualBillyBass.com</a><br></font>
<nobr><img id="ImgMouth" src="https://bedno.com/g/vbmbb/mouth-0.png" border=0 width="144" height="144"><img id="ImgTail" src="https://bedno.com/g/vbmbb/tail-0.png" border=0 width="144" height="144"></nobr><br>

<div id="NoSpeech"></div>
<button onClick="SpeakWeather();" style="color:#000000; background-color:orange; font-family:Helvetica, Arial; text-decoration:bold; font-size:12pt;">Weather</button> &nbsp;&nbsp;
<button onClick="SpeakFortune();" style="color:#000000; background-color:orange; font-family:Helvetica, Arial; text-decoration:bold; font-size:12pt;">Fortune</button> &nbsp;&nbsp;
<button onClick="SpeakSong();" style="color:#000000; background-color:orange; font-family:Helvetica, Arial; text-decoration:bold; font-size:12pt;">Song</button><br><br>

<font size=2><a href="http://VirtualBillyBass.com">Virtual Big Mouth Billy Bass</a><br></font>
<font size=1><a href="https://github.com/bedno/Virtual_Big_Mouth_Billy_Bass" target="github">https://github.com/bedno/Virtual_Big_Mouth_Billy_Bass</a><br></font>

<div id="SpeechConsole" style="overflow:hidden; font-size:7pt; color:gray;"></div><br><br>

</br></center>
</font></body>
</html>

